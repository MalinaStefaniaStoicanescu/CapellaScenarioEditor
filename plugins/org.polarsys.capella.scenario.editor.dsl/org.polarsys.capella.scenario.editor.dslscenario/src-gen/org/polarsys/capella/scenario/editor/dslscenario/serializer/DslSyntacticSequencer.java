/*
 * generated by Xtext 2.18.0.M3
 */
package org.polarsys.capella.scenario.editor.dslscenario.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.polarsys.capella.scenario.editor.dslscenario.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_PhysicalComponent___BehaviorKeyword_1_1_or_NodeKeyword_1_2_or_UnsetKeyword_1_0__q;
	protected AbstractElementAlias match_ScenarioTypeAndParticipants_ESKeyword_0_1_1_or_ISKeyword_0_1_0;
	protected AbstractElementAlias match_ScenarioTypeAndParticipants_ESKeyword_1_1_1_or_ISKeyword_1_1_0;
	protected AbstractElementAlias match_ScenarioTypeAndParticipants_ESKeyword_2_1_1_or_ISKeyword_2_1_0;
	protected AbstractElementAlias match_ScenarioTypeAndParticipants_LogicalKeyword_3_0_1_or_PhysicalKeyword_3_0_2_or_SystemKeyword_3_0_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DslGrammarAccess) access;
		match_PhysicalComponent___BehaviorKeyword_1_1_or_NodeKeyword_1_2_or_UnsetKeyword_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getPhysicalComponentAccess().getBehaviorKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getPhysicalComponentAccess().getNodeKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getPhysicalComponentAccess().getUnsetKeyword_1_0()));
		match_ScenarioTypeAndParticipants_ESKeyword_0_1_1_or_ISKeyword_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getESKeyword_0_1_1()), new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getISKeyword_0_1_0()));
		match_ScenarioTypeAndParticipants_ESKeyword_1_1_1_or_ISKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getESKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getISKeyword_1_1_0()));
		match_ScenarioTypeAndParticipants_ESKeyword_2_1_1_or_ISKeyword_2_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getESKeyword_2_1_1()), new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getISKeyword_2_1_0()));
		match_ScenarioTypeAndParticipants_LogicalKeyword_3_0_1_or_PhysicalKeyword_3_0_2_or_SystemKeyword_3_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getLogicalKeyword_3_0_1()), new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getPhysicalKeyword_3_0_2()), new TokenAlias(false, false, grammarAccess.getScenarioTypeAndParticipantsAccess().getSystemKeyword_3_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_PhysicalComponent___BehaviorKeyword_1_1_or_NodeKeyword_1_2_or_UnsetKeyword_1_0__q.equals(syntax))
				emit_PhysicalComponent___BehaviorKeyword_1_1_or_NodeKeyword_1_2_or_UnsetKeyword_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScenarioTypeAndParticipants_ESKeyword_0_1_1_or_ISKeyword_0_1_0.equals(syntax))
				emit_ScenarioTypeAndParticipants_ESKeyword_0_1_1_or_ISKeyword_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScenarioTypeAndParticipants_ESKeyword_1_1_1_or_ISKeyword_1_1_0.equals(syntax))
				emit_ScenarioTypeAndParticipants_ESKeyword_1_1_1_or_ISKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScenarioTypeAndParticipants_ESKeyword_2_1_1_or_ISKeyword_2_1_0.equals(syntax))
				emit_ScenarioTypeAndParticipants_ESKeyword_2_1_1_or_ISKeyword_2_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScenarioTypeAndParticipants_LogicalKeyword_3_0_1_or_PhysicalKeyword_3_0_2_or_SystemKeyword_3_0_0.equals(syntax))
				emit_ScenarioTypeAndParticipants_LogicalKeyword_3_0_1_or_PhysicalKeyword_3_0_2_or_SystemKeyword_3_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('unset' | 'behavior' | 'node')?
	 *
	 * This ambiguous syntax occurs at:
	 *     component=Component (ambiguity) (rule end)
	 */
	protected void emit_PhysicalComponent___BehaviorKeyword_1_1_or_NodeKeyword_1_2_or_UnsetKeyword_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'IS' | 'ES'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'System' (ambiguity) name=STRING
	 */
	protected void emit_ScenarioTypeAndParticipants_ESKeyword_0_1_1_or_ISKeyword_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'IS' | 'ES'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Logical' (ambiguity) name=STRING
	 */
	protected void emit_ScenarioTypeAndParticipants_ESKeyword_1_1_1_or_ISKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'IS' | 'ES'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Physical' (ambiguity) name=STRING
	 */
	protected void emit_ScenarioTypeAndParticipants_ESKeyword_2_1_1_or_ISKeyword_2_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'System' | 'Logical' | 'Physical'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'FS' name=STRING
	 */
	protected void emit_ScenarioTypeAndParticipants_LogicalKeyword_3_0_1_or_PhysicalKeyword_3_0_2_or_SystemKeyword_3_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
