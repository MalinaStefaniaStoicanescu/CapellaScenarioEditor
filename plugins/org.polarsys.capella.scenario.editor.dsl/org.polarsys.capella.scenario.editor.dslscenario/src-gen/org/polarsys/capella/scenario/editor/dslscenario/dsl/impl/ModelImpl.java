/**
 * generated by Xtext 2.18.0.M3
 */
package org.polarsys.capella.scenario.editor.dslscenario.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.polarsys.capella.scenario.editor.dslscenario.dsl.DslPackage;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Model;
import org.polarsys.capella.scenario.editor.dslscenario.dsl.ScenarioTypeAndParticipants;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.polarsys.capella.scenario.editor.dslscenario.dsl.impl.ModelImpl#getScenarioType <em>Scenario Type</em>}</li>
 *   <li>{@link org.polarsys.capella.scenario.editor.dslscenario.dsl.impl.ModelImpl#getMessagesOrReferences <em>Messages Or References</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getScenarioType() <em>Scenario Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScenarioType()
   * @generated
   * @ordered
   */
  protected ScenarioTypeAndParticipants scenarioType;

  /**
   * The cached value of the '{@link #getMessagesOrReferences() <em>Messages Or References</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessagesOrReferences()
   * @generated
   * @ordered
   */
  protected EList<EObject> messagesOrReferences;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScenarioTypeAndParticipants getScenarioType()
  {
    return scenarioType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetScenarioType(ScenarioTypeAndParticipants newScenarioType, NotificationChain msgs)
  {
    ScenarioTypeAndParticipants oldScenarioType = scenarioType;
    scenarioType = newScenarioType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__SCENARIO_TYPE, oldScenarioType, newScenarioType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScenarioType(ScenarioTypeAndParticipants newScenarioType)
  {
    if (newScenarioType != scenarioType)
    {
      NotificationChain msgs = null;
      if (scenarioType != null)
        msgs = ((InternalEObject)scenarioType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__SCENARIO_TYPE, null, msgs);
      if (newScenarioType != null)
        msgs = ((InternalEObject)newScenarioType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__SCENARIO_TYPE, null, msgs);
      msgs = basicSetScenarioType(newScenarioType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__SCENARIO_TYPE, newScenarioType, newScenarioType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EObject> getMessagesOrReferences()
  {
    if (messagesOrReferences == null)
    {
      messagesOrReferences = new EObjectContainmentEList<EObject>(EObject.class, this, DslPackage.MODEL__MESSAGES_OR_REFERENCES);
    }
    return messagesOrReferences;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__SCENARIO_TYPE:
        return basicSetScenarioType(null, msgs);
      case DslPackage.MODEL__MESSAGES_OR_REFERENCES:
        return ((InternalEList<?>)getMessagesOrReferences()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__SCENARIO_TYPE:
        return getScenarioType();
      case DslPackage.MODEL__MESSAGES_OR_REFERENCES:
        return getMessagesOrReferences();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__SCENARIO_TYPE:
        setScenarioType((ScenarioTypeAndParticipants)newValue);
        return;
      case DslPackage.MODEL__MESSAGES_OR_REFERENCES:
        getMessagesOrReferences().clear();
        getMessagesOrReferences().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__SCENARIO_TYPE:
        setScenarioType((ScenarioTypeAndParticipants)null);
        return;
      case DslPackage.MODEL__MESSAGES_OR_REFERENCES:
        getMessagesOrReferences().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__SCENARIO_TYPE:
        return scenarioType != null;
      case DslPackage.MODEL__MESSAGES_OR_REFERENCES:
        return messagesOrReferences != null && !messagesOrReferences.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
