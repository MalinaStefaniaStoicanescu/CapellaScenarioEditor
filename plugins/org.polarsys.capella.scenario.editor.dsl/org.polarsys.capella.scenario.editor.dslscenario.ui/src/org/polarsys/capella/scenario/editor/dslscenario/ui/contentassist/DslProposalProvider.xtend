/*
 * generated by Xtext 2.18.0.M3
 */
package org.polarsys.capella.scenario.editor.dslscenario.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import java.util.Arrays
import org.eclipse.xtext.Assignment
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Actor
import org.polarsys.capella.scenario.editor.dslscenario.dsl.ScenarioTypeAndParticipants
import org.polarsys.capella.scenario.editor.dslscenario.dsl.Model
import org.polarsys.capella.scenario.editor.dslscenario.dsl.SequenceMessage

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class DslProposalProvider extends AbstractDslProposalProvider {

	override completeActor_Name(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		for (String el : getPropose()) {
			acceptor.accept(createCompletionProposal(el, el, null, context));
			}
		}
		
	override completeSequenceMessage_Source(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		for (EObject el: variablesDefinedBefore2(model as Model)) {
			acceptor.accept(createCompletionProposal((el as Actor).id, (el as Actor).id, null, context))
		}
	}
	
	override completeSequenceMessage_Target(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		for (EObject el: variablesDefinedBefore3(model as SequenceMessage)) {
			acceptor.accept(createCompletionProposal((el as Actor).id, (el as Actor).id, null, context))
		}
	}
	
	def getPropose(){
		return Arrays.asList("Hello", "World!", "How", "Are", "You")
			
	}
	
	def variablesDefinedBefore(ScenarioTypeAndParticipants sc) {
		return sc.participants		
		
	}
	def variablesDefinedBefore2(Model m) {
		return m.scenarioType.participants		
		
	}
	
	def variablesDefinedBefore3(SequenceMessage seq) {
		return (seq.eContainer as Model).scenarioType.participants
	}
   
	
}


